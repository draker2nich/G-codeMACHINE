"""
–ú–æ–¥—É–ª—å –≥–ª–∞–≤–Ω–æ–≥–æ –æ–∫–Ω–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –≤—Å–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∏—Ö –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ.
"""

import os
from typing import Optional
from PySide6.QtWidgets import (
    QMainWindow, QWidget, QHBoxLayout, QVBoxLayout, QSplitter, 
    QTabWidget, QGroupBox, QApplication, QMenuBar
)
from PySide6.QtCore import Qt, QSettings, QTimer
from PySide6.QtGui import QAction, QPixmap

from config import AppSettings, SettingsManager
from styles import ModernStyle
from preview_canvas import AdvancedTextPreviewCanvas
from gcode_generator import SmartGCodeGenerator, GCodeValidator
from ui_components import (
    EditorPanel, PageSettingsTab, TextSettingsTab, SmartFormattingTab, 
    ExportTab, NavigationWidget, BackgroundControlWidget,
    show_error_message, show_info_message, show_warning_message,
    get_save_file_name, get_open_file_name, get_directory
)
from text_formatter import SmartFormatter


class NotesToGCodeStudioPro(QMainWindow):
    """–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–∞—è –≤–µ—Ä—Å–∏—è Notes to G-code Studio"""
    
    def __init__(self):
        super().__init__()
        self.setWindowTitle("Notes ‚Üí G-code Studio Pro - –£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        self.setGeometry(50, 50, 1600, 1000)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.qt_settings = QSettings("NotesToGCodePro", "Settings")
        self.settings_manager = SettingsManager(self.qt_settings)
        self.app_settings = self.settings_manager.load_app_settings()
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        is_valid, errors = self.app_settings.validate_all()
        if not is_valid:
            show_warning_message(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", 
                               f"–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö:\n" + "\n".join(errors))
        
        # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ç–µ–º—ã
        self.setStyleSheet(ModernStyle.get_dark_stylesheet())
        
        # –°–æ–∑–¥–∞–Ω–∏–µ UI
        self.setup_menu()
        self.setup_ui()
        self.setup_connections()
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
        self.gcode_generator = None
        
        # –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏
        QTimer.singleShot(100, self.generate_grid)
        
    def setup_menu(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –º–µ–Ω—é"""
        menubar = self.menuBar()
        
        # –ú–µ–Ω—é —Ñ–∞–π–ª
        file_menu = menubar.addMenu("–§–∞–π–ª")
        
        open_action = QAction("–û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—Å—Ç", self)
        open_action.setShortcut("Ctrl+O")
        open_action.triggered.connect(self.open_text_file)
        file_menu.addAction(open_action)
        
        save_action = QAction("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç", self)
        save_action.setShortcut("Ctrl+S")
        save_action.triggered.connect(self.save_text_file)
        file_menu.addAction(save_action)
        
        file_menu.addSeparator()
        
        export_gcode_action = QAction("–≠–∫—Å–ø–æ—Ä—Ç G-code", self)
        export_gcode_action.setShortcut("Ctrl+E")
        export_gcode_action.triggered.connect(self.export_gcode)
        file_menu.addAction(export_gcode_action)
        
        file_menu.addSeparator()
        
        exit_action = QAction("–í—ã—Ö–æ–¥", self)
        exit_action.setShortcut("Ctrl+Q")
        exit_action.triggered.connect(self.close)
        file_menu.addAction(exit_action)
        
        # –ú–µ–Ω—é –≤–∏–¥
        view_menu = menubar.addMenu("–í–∏–¥")
        
        prev_page_action = QAction("–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", self)
        prev_page_action.setShortcut("Ctrl+Left")
        prev_page_action.triggered.connect(self.prev_page)
        view_menu.addAction(prev_page_action)
        
        next_page_action = QAction("–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞", self)
        next_page_action.setShortcut("Ctrl+Right")
        next_page_action.triggered.connect(self.next_page)
        view_menu.addAction(next_page_action)
        
        # –ú–µ–Ω—é –ø–æ–º–æ—â—å
        help_menu = menubar.addMenu("–ü–æ–º–æ—â—å")
        
        about_action = QAction("–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", self)
        about_action.triggered.connect(self.show_about)
        help_menu.addAction(about_action)
    
    def setup_ui(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        central_widget = QWidget()
        self.setCentralWidget(central_widget)
        
        main_layout = QHBoxLayout(central_widget)
        main_layout.setSpacing(10)
        main_layout.setContentsMargins(10, 10, 10, 10)
        
        # –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - —Ä–µ–¥–∞–∫—Ç–æ—Ä
        self.editor_panel = EditorPanel()
        
        # –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        right_panel = self.create_preview_and_settings_panel()
        
        # –°–ø–ª–∏—Ç—Ç–µ—Ä
        splitter = QSplitter(Qt.Horizontal)
        splitter.addWidget(self.editor_panel)
        splitter.addWidget(right_panel)
        splitter.setStretchFactor(0, 2)
        splitter.setStretchFactor(1, 3)
        splitter.setSizes([600, 1000])
        
        main_layout.addWidget(splitter)
    
    def create_preview_and_settings_panel(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–∞–Ω–µ–ª–∏ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        panel = QWidget()
        layout = QHBoxLayout(panel)
        layout.setSpacing(10)
        
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä (–ª–µ–≤–∞—è —á–∞—Å—Ç—å)
        preview_group = QGroupBox("üîç –£–º–Ω—ã–π –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä")
        preview_layout = QVBoxLayout(preview_group)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º
        self.navigation_widget = NavigationWidget()
        preview_layout.addWidget(self.navigation_widget)
        
        # Canvas –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.preview_canvas = AdvancedTextPreviewCanvas()
        self.preview_canvas.update_settings(
            self.app_settings.page,
            self.app_settings.text,
            self.app_settings.page_numbers
        )
        preview_layout.addWidget(self.preview_canvas)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–º
        self.background_control = BackgroundControlWidget()
        preview_layout.addWidget(self.background_control)
        
        # –í–∫–ª–∞–¥–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ (–ø—Ä–∞–≤–∞—è —á–∞—Å—Ç—å)
        self.settings_tabs = QTabWidget()
        
        # –í–∫–ª–∞–¥–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        self.page_tab = PageSettingsTab(self.app_settings.page)
        self.settings_tabs.addTab(self.page_tab, "üìÑ –°—Ç—Ä–∞–Ω–∏—Ü–∞")
        
        # –í–∫–ª–∞–¥–∫–∞ —Ç–µ–∫—Å—Ç–∞
        self.text_tab = TextSettingsTab(self.app_settings.text)
        self.settings_tabs.addTab(self.text_tab, "‚úèÔ∏è –¢–µ–∫—Å—Ç")
        
        # –í–∫–ª–∞–¥–∫–∞ —É–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        self.smart_tab = SmartFormattingTab(
            self.app_settings.text,
            self.app_settings.page_numbers
        )
        self.settings_tabs.addTab(self.smart_tab, "üß† –£–º–Ω–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        
        # –í–∫–ª–∞–¥–∫–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        self.export_tab = ExportTab()
        self.settings_tabs.addTab(self.export_tab, "üì§ –≠–∫—Å–ø–æ—Ä—Ç")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ –≥–æ—Ä–∏–∑–æ–Ω—Ç–∞–ª—å–Ω—ã–π layout
        layout.addWidget(preview_group, 2)  # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∑–∞–Ω–∏–º–∞–µ—Ç 2 —á–∞—Å—Ç–∏
        layout.addWidget(self.settings_tabs, 1)  # –í–∫–ª–∞–¥–∫–∏ –∑–∞–Ω–∏–º–∞—é—Ç 1 —á–∞—Å—Ç—å
        
        return panel
    
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤"""
        # –†–µ–¥–∞–∫—Ç–æ—Ä —Ç–µ–∫—Å—Ç–∞
        self.editor_panel.text_changed.connect(self.on_text_changed)
        
        # –ù–∞–≤–∏–≥–∞—Ü–∏—è
        self.navigation_widget.prev_page.connect(self.prev_page)
        self.navigation_widget.next_page.connect(self.next_page)
        
        # –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–æ–Ω–æ–º
        self.background_control.generate_grid.connect(self.generate_grid)
        self.background_control.import_background.connect(self.import_background)
        self.background_control.clear_background.connect(self.clear_background)
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏
        self.page_tab.settings_changed.connect(self.update_page_settings)
        self.text_tab.settings_changed.connect(self.update_text_settings)
        self.smart_tab.settings_changed.connect(self.update_smart_settings)
        
        # –≠–∫—Å–ø–æ—Ä—Ç
        self.export_tab.export_gcode_requested.connect(self.export_gcode)
        self.export_tab.export_image_requested.connect(self.export_image)
        self.export_tab.export_all_pages_requested.connect(self.export_all_pages)
    
    def on_text_changed(self, text: str):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–∞"""
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞
        self.preview_canvas.set_text(text)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Ç—Ä–∞–Ω–∏—Ü –≤ —Ä–µ–¥–∞–∫—Ç–æ—Ä–µ
        page_count = self.preview_canvas.get_page_count()
        self.editor_panel.update_page_count(page_count)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
        self.update_navigation()
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —ç–∫—Å–ø–æ—Ä—Ç–∞
        stats = self.preview_canvas.get_text_statistics()
        if stats['characters'] > 0:
            self.export_tab.set_status(
                f"–ì–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É: {stats['words']} —Å–ª–æ–≤, {stats['pages']} —Å—Ç—Ä–∞–Ω–∏—Ü"
            )
        else:
            self.export_tab.set_status("–ì–æ—Ç–æ–≤ –∫ —ç–∫—Å–ø–æ—Ä—Ç—É")
        
        # –ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä G-code —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        QTimer.singleShot(1000, self.generate_gcode_preview)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ
        self.update_adaptive_font_info()
    
    def update_page_settings(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Å—Ç—Ä–∞–Ω–∏—Ü—ã"""
        self.preview_canvas.update_settings(page_settings=self.app_settings.page)
        self.update_adaptive_font_info()
    
    def update_text_settings(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —Ç–µ–∫—Å—Ç–∞"""
        self.preview_canvas.update_settings(text_settings=self.app_settings.text)
        self.update_adaptive_font_info()
    
    def update_smart_settings(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ —É–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        self.preview_canvas.update_settings(
            text_settings=self.app_settings.text,
            page_number_settings=self.app_settings.page_numbers
        )
        self.update_adaptive_font_info()
    
    def update_adaptive_font_info(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ–± –∞–¥–∞–ø—Ç–∏–≤–Ω–æ–º —à—Ä–∏—Ñ—Ç–µ"""
        smart_formatter = SmartFormatter(self.app_settings.page, self.app_settings.text)
        adaptive_size = smart_formatter.calculate_adaptive_font_size()
        
        info_text = f"–ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —Ä–∞–∑–º–µ—Ä —à—Ä–∏—Ñ—Ç–∞: {adaptive_size:.1f} pt\n"
        info_text += f"–†–∞–∑–º–µ—Ä —Å–µ—Ç–∫–∏: {self.app_settings.page.grid_size_mm} –º–º\n"
        info_text += f"–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è: {self.app_settings.text.font_fill_ratio}"
        
        self.smart_tab.update_info(info_text)
    
    def update_navigation(self):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ —Å—Ç—Ä–∞–Ω–∏—Ü–∞–º"""
        current_page = self.preview_canvas.get_current_page()
        total_pages = self.preview_canvas.get_page_count()
        self.navigation_widget.update_navigation(current_page, total_pages)
    
    def generate_grid(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–µ—Ç–∫–∏"""
        self.preview_canvas.generate_grid()
    
    def import_background(self):
        """–ò–º–ø–æ—Ä—Ç —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è"""
        file_path = get_open_file_name(
            self, "–í—ã–±–æ—Ä —Ñ–æ–Ω–æ–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è",
            "–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (*.png *.jpg *.jpeg *.bmp)"
        )
        
        if file_path:
            pixmap = QPixmap(file_path)
            if not pixmap.isNull():
                self.preview_canvas.set_background(pixmap)
            else:
                show_error_message(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    def clear_background(self):
        """–û—á–∏—Å—Ç–∫–∞ —Ñ–æ–Ω–∞"""
        self.preview_canvas.background_image = None
        self.preview_canvas.update_display()
    
    def prev_page(self):
        """–ü—Ä–µ–¥—ã–¥—É—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        if self.preview_canvas.prev_page():
            self.update_navigation()
    
    def next_page(self):
        """–°–ª–µ–¥—É—é—â–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞"""
        if self.preview_canvas.next_page():
            self.update_navigation()
    
    def generate_gcode_preview(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä–∞ G-code"""
        if not self.preview_canvas.formatted_pages:
            self.export_tab.set_gcode_preview("")
            return
        
        # –ü–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–≤–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
        first_page = self.preview_canvas.formatted_pages[0]
        preview_lines = first_page[:5]
        
        smart_formatter = SmartFormatter(self.app_settings.page, self.app_settings.text)
        adaptive_size = smart_formatter.calculate_adaptive_font_size()
        
        preview_text = f"""
; ===== –£–º–Ω—ã–π G-code Preview =====
; –°—Ç—Ä–∞–Ω–∏—Ü: {len(self.preview_canvas.formatted_pages)}
; –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π —à—Ä–∏—Ñ—Ç: {adaptive_size:.1f}pt
; –í—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏–µ: {self.app_settings.text.alignment}
; –°–µ—Ç–∫–∞: {self.app_settings.page.grid_type} {self.app_settings.page.grid_size_mm}–º–º

G90 ; –ê–±—Å–æ–ª—é—Ç–Ω–æ–µ –ø–æ–∑–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
G21 ; –ú–∏–ª–ª–∏–º–µ—Ç—Ä—ã
M5 ; –ü–æ–¥–Ω—è—Ç—å –ø–µ—Ä–æ

; === –°—Ç—Ä–∞–Ω–∏—Ü–∞ 1 ===
"""
        
        for i, line in enumerate(preview_lines):
            if line.strip():
                preview_text += f"; –°—Ç—Ä–æ–∫–∞ {i+1}: {line[:30]}{'...' if len(line) > 30 else ''}\n"
                preview_text += f"G0 X5.00 Y{5.0 + i*4.0:.2f}\n"
                preview_text += "M3 ; –û–ø—É—Å—Ç–∏—Ç—å –ø–µ—Ä–æ\n"
                preview_text += f"G1 X{5.0 + len(line[:10])*2:.2f} Y{5.0 + i*4.0:.2f} F1000\n"
                preview_text += "M5 ; –ü–æ–¥–Ω—è—Ç—å –ø–µ—Ä–æ\n\n"
        
        preview_text += "...\n; (–ü–æ–ª–Ω—ã–π G-code –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ)"
        
        self.export_tab.set_gcode_preview(preview_text)
    
    def export_gcode(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —É–º–Ω–æ–≥–æ G-code"""
        if not self.preview_canvas.formatted_pages:
            show_warning_message(self, "–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", "–ù–µ—Ç —Ç–µ–∫—Å—Ç–∞ –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞")
            return
        
        file_path = get_save_file_name(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —É–º–Ω—ã–π G-code", "smart_notes.gcode",
            "G-code —Ñ–∞–π–ª—ã (*.gcode *.nc)"
        )
        
        if file_path:
            self.export_tab.show_progress(True)
            self.export_tab.set_progress(0)
            
            self.gcode_generator = SmartGCodeGenerator(
                self.preview_canvas.formatted_pages,
                self.app_settings.page,
                self.app_settings.text,
                self.app_settings.page_numbers
            )
            
            self.gcode_generator.finished.connect(
                lambda gcode: self.save_gcode(file_path, gcode)
            )
            self.gcode_generator.error.connect(
                lambda err: show_error_message(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {err}")
            )
            self.gcode_generator.progress.connect(self.export_tab.set_progress)
            self.gcode_generator.status_update.connect(self.export_tab.set_status)
            
            self.gcode_generator.start()
    
    def save_gcode(self, file_path: str, gcode: str):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ G-code"""
        try:
            # –í–∞–ª–∏–¥–∞—Ü–∏—è G-code
            is_valid, messages = GCodeValidator.validate_gcode(gcode)
            
            with open(file_path, 'w', encoding='utf-8') as f:
                f.write(gcode)
            
            self.export_tab.show_progress(False)
            
            # –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            result_message = f"–£–º–Ω—ã–π G-code —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{file_path}\n\n"
            result_message += f"–°—Ç—Ä–∞–Ω–∏—Ü: {len(self.preview_canvas.formatted_pages)}\n"
            
            if not is_valid:
                result_message += f"\n–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –≤–∞–ª–∏–¥–∞—Ü–∏–∏:\n" + "\n".join(messages[:3])
                show_warning_message(self, "G-code —Å–æ—Ö—Ä–∞–Ω–µ–Ω —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏", result_message)
            else:
                show_info_message(self, "–£—Å–ø–µ—Ö", result_message)
                
        except Exception as e:
            self.export_tab.show_progress(False)
            show_error_message(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è: {str(e)}")
    
    def export_image(self):
        """–≠–∫—Å–ø–æ—Ä—Ç —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ"""
        file_path = get_save_file_name(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ", "page.png",
            "PNG (*.png);;JPEG (*.jpg)"
        )
        
        if file_path:
            pixmap = self.preview_canvas.export_current_page_as_pixmap()
            if not pixmap.isNull() and pixmap.save(file_path):
                show_info_message(self, "–£—Å–ø–µ—Ö", f"–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ:\n{file_path}")
            else:
                show_error_message(self, "–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")
    
    def export_all_pages(self):
        """–≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω–∏—Ü –∫–∞–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
        dir_path = get_directory(self, "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞–ø–∫—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü")
        
        if dir_path:
            pixmaps = self.preview_canvas.export_all_pages_as_pixmaps()
            saved_count = 0
            
            for page_index, pixmap in enumerate(pixmaps):
                file_name = f"page_{page_index + 1:03d}.png"
                file_path = os.path.join(dir_path, file_name)
                
                if pixmap.save(file_path):
                    saved_count += 1
            
            show_info_message(
                self, "–£—Å–ø–µ—Ö",
                f"–°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {saved_count} –∏–∑ {len(pixmaps)} —Å—Ç—Ä–∞–Ω–∏—Ü –≤:\n{dir_path}"
            )
    
    def open_text_file(self):
        """–û—Ç–∫—Ä—ã—Ç–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        file_path = get_open_file_name(
            self, "–û—Ç–∫—Ä—ã—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª",
            "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt *.md);;–í—Å–µ —Ñ–∞–π–ª—ã (*)"
        )
        
        if file_path:
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                self.editor_panel.set_text(content)
            except Exception as e:
                show_error_message(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–∫—Ä—ã—Ç—å —Ñ–∞–π–ª: {str(e)}")
    
    def save_text_file(self):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞"""
        file_path = get_save_file_name(
            self, "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª", "notes.txt",
            "–¢–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã (*.txt);;Markdown (*.md)"
        )
        
        if file_path:
            try:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(self.editor_panel.get_text())
                show_info_message(self, "–£—Å–ø–µ—Ö", f"–§–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω:\n{file_path}")
            except Exception as e:
                show_error_message(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª: {str(e)}")
    
    def show_about(self):
        """–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–≥—Ä–∞–º–º–µ"""
        about_text = """
        <h2>Notes ‚Üí G-code Studio Pro</h2>
        <p><b>–í–µ—Ä—Å–∏—è:</b> 3.0 Professional</p>
        <p><b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> Smart G-code Studio</p>
        <br>
        <p>–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∫–æ–Ω—Å–ø–µ–∫—Ç–æ–≤
        –≤ G-code –¥–ª—è drawing machine —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π:</p>
        <ul>
        <li>–£–º–Ω–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω—ã—Ö —à—Ä–∏—Ñ—Ç–æ–≤</li>
        <li>–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –ø–æ —Å–µ—Ç–∫–µ</li>
        <li>–ú–Ω–æ–≥–æ—Å—Ç—Ä–∞–Ω–∏—á–Ω–æ–π –ø–µ—á–∞—Ç–∏</li>
        <li>–ù—É–º–µ—Ä–∞—Ü–∏–∏ —Å—Ç—Ä–∞–Ω–∏—Ü</li>
        <li>–°–æ–≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞</li>
        </ul>
        """
        
        show_info_message(self, "–û –ø—Ä–æ–≥—Ä–∞–º–º–µ", about_text)
    
    def closeEvent(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–∫—Ä—ã—Ç–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ G-code –µ—Å–ª–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç
        if self.gcode_generator and self.gcode_generator.isRunning():
            self.gcode_generator.terminate()
            self.gcode_generator.wait()
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settings_manager.save_app_settings(self.app_settings)
        
        event.accept()
