#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–±–æ—Ä–∫–∏ Notes to G-code Studio Pro –≤ –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç PyInstaller –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è standalone –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
"""

import os
import sys
import shutil
import subprocess
from pathlib import Path


def check_pyinstaller():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è PyInstaller"""
    try:
        import PyInstaller
        return True
    except ImportError:
        return False


def install_pyinstaller():
    """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ PyInstaller"""
    print("üì¶ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º PyInstaller...")
    try:
        subprocess.check_call([sys.executable, "-m", "pip", "install", "pyinstaller"])
        print("‚úÖ PyInstaller —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyInstaller")
        return False


def create_spec_file():
    """–°–æ–∑–¥–∞–Ω–∏–µ .spec —Ñ–∞–π–ª–∞ –¥–ª—è PyInstaller"""
    spec_content = '''# -*- mode: python ; coding: utf-8 -*-

block_cipher = None

a = Analysis(
    ['main.py'],
    pathex=[],
    binaries=[],
    datas=[
        ('*.py', '.'),
    ],
    hiddenimports=[
        'PySide6.QtCore',
        'PySide6.QtGui', 
        'PySide6.QtWidgets',
        'markdown',
        'matplotlib',
    ],
    hookspath=[],
    hooksconfig={},
    runtime_hooks=[],
    excludes=[
        'tkinter',
        'unittest',
        'email',
        'http',
        'urllib',
        'xml',
        'pydoc',
    ],
    win_no_prefer_redirects=False,
    win_private_assemblies=False,
    cipher=block_cipher,
    noarchive=False,
)

pyz = PYZ(a.pure, a.zipped_data, cipher=block_cipher)

exe = EXE(
    pyz,
    a.scripts,
    a.binaries,
    a.zipfiles,
    a.datas,
    [],
    name='NotesToGCodeStudioPro',
    debug=False,
    bootloader_ignore_signals=False,
    strip=False,
    upx=True,
    upx_exclude=[],
    runtime_tmpdir=None,
    console=False,  # GUI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    disable_windowed_traceback=False,
    target_arch=None,
    codesign_identity=None,
    entitlements_file=None,
    icon=None,  # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∏–∫–æ–Ω–∫—É
)
'''
    
    with open('notes_to_gcode.spec', 'w', encoding='utf-8') as f:
        f.write(spec_content)
    
    print("üìÑ –§–∞–π–ª notes_to_gcode.spec —Å–æ–∑–¥–∞–Ω")


def build_executable():
    """–°–±–æ—Ä–∫–∞ –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞"""
    print("üî® –ù–∞—á–∏–Ω–∞–µ–º —Å–±–æ—Ä–∫—É –∏—Å–ø–æ–ª–Ω—è–µ–º–æ–≥–æ —Ñ–∞–π–ª–∞...")
    print("‚è±Ô∏è  –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç...")
    
    try:
        # –û—á–∏—Å—Ç–∫–∞ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö —Å–±–æ—Ä–æ–∫
        if os.path.exists('dist'):
            shutil.rmtree('dist')
        if os.path.exists('build'):
            shutil.rmtree('build')
            
        # –ó–∞–ø—É—Å–∫ PyInstaller
        cmd = [
            sys.executable, "-m", "PyInstaller",
            "--clean",
            "--noconfirm", 
            "notes_to_gcode.spec"
        ]
        
        print(f"üöÄ –í—ã–ø–æ–ª–Ω—è–µ–º: {' '.join(cmd)}")
        result = subprocess.run(cmd, capture_output=True, text=True)
        
        if result.returncode == 0:
            print("‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            exe_path = Path("dist/NotesToGCodeStudioPro.exe" if sys.platform == "win32" else "dist/NotesToGCodeStudioPro")
            if exe_path.exists():
                size_mb = exe_path.stat().st_size / (1024 * 1024)
                print(f"üìÅ –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª: {exe_path}")
                print(f"üìè –†–∞–∑–º–µ—Ä: {size_mb:.1f} –ú–ë")
                return True
            else:
                print("‚ùå –ò—Å–ø–æ–ª–Ω—è–µ–º—ã–π —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
                return False
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ:")
            print(result.stderr)
            return False
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


def cleanup():
    """–û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤"""
    temp_files = ['notes_to_gcode.spec', 'build']
    
    for item in temp_files:
        if os.path.exists(item):
            if os.path.isdir(item):
                shutil.rmtree(item)
            else:
                os.remove(item)
            print(f"üßπ –£–¥–∞–ª–µ–Ω: {item}")


def create_portable_package():
    """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞"""
    if not os.path.exists('dist'):
        print("‚ùå –ü–∞–ø–∫–∞ dist –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    print("üì¶ –°–æ–∑–¥–∞–µ–º –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç...")
    
    # –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    additional_files = ['README.md', 'requirements.txt']
    
    for file in additional_files:
        if os.path.exists(file):
            shutil.copy2(file, 'dist/')
            print(f"üìÑ –°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω: {file}")
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∑–∞–ø—É—Å–∫—É
    run_instruction = """
# Notes to G-code Studio Pro - –ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω–∞—è –≤–µ—Ä—Å–∏—è

## –ó–∞–ø—É—Å–∫
–ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ñ–∞–π–ª NotesToGCodeStudioPro.exe (Windows) –∏–ª–∏ NotesToGCodeStudioPro (Linux/Mac)

## –°–∏—Å—Ç–µ–º–Ω—ã–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è
- Windows 10/11, Linux, –∏–ª–∏ macOS 10.14+
- 4 –ì–ë –û–ó–£
- 200 –ú–ë —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –º–µ—Å—Ç–∞

## –ü–µ—Ä–≤—ã–π –∑–∞–ø—É—Å–∫
1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
2. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –≤ –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞ –≤–∫–ª–∞–¥–∫–∞—Ö —Å–ø—Ä–∞–≤–∞
4. –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–π—Ç–µ G-code

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞
–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –ø—Ä–æ–≤–µ—Ä—å—Ç–µ:
- –ó–∞–ø—É—Å–∫ –æ—Ç –∏–º–µ–Ω–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ (Windows)
- –†–∞–∑—Ä–µ—à–µ–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ (Linux/Mac): chmod +x NotesToGCodeStudioPro
- –ù–∞–ª–∏—á–∏–µ –≥—Ä–∞—Ñ–∏—á–µ—Å–∫–æ–π –æ–±–æ–ª–æ—á–∫–∏
"""
    
    with open('dist/–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è.txt', 'w', encoding='utf-8') as f:
        f.write(run_instruction)
    
    print("‚úÖ –ü–æ—Ä—Ç–∞—Ç–∏–≤–Ω—ã–π –ø–∞–∫–µ—Ç –≥–æ—Ç–æ–≤ –≤ –ø–∞–ø–∫–µ 'dist'")
    return True


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏"""
    print("=" * 60)
    print("  Notes ‚Üí G-code Studio Pro - –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if not check_pyinstaller():
        print("‚ö†Ô∏è  PyInstaller –Ω–µ –Ω–∞–π–¥–µ–Ω")
        if not install_pyinstaller():
            print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å PyInstaller")
            return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è main.py
    if not os.path.exists('main.py'):
        print("‚ùå –§–∞–π–ª main.py –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return False
    
    try:
        # –°–æ–∑–¥–∞–Ω–∏–µ .spec —Ñ–∞–π–ª–∞
        create_spec_file()
        
        # –°–±–æ—Ä–∫–∞
        if build_executable():
            # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Ä—Ç–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–∞–∫–µ—Ç–∞
            create_portable_package()
            
            print("\nüéâ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print("üìÅ –†–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø–∞–ø–∫–µ 'dist'")
            
            # –û–ø—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏
            response = input("\nüßπ –û—á–∏—Å—Ç–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã? (y/n): ").lower()
            if response in ['y', 'yes', '–¥–∞', '–¥']:
                cleanup()
            
            return True
        else:
            print("\n‚ùå –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞—Å—å —Å –æ—à–∏–±–∫–∞–º–∏")
            return False
            
    except KeyboardInterrupt:
        print("\n‚ö†Ô∏è  –°–±–æ—Ä–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return False
    except Exception as e:
        print(f"\n‚ùå –ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False


if __name__ == "__main__":
    success = main()
    sys.exit(0 if success else 1)
